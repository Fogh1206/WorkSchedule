@using WorkScheduleBlazorApp.Authentication
@using WorkScheduleBlazorApp.Models
@namespace WorkScheduleBlazorApp.Components
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigationManager

<AuthorizeView>
    <NotAuthorized>
        
        <div class="form-group">
            <label>User name:</label>
            <input type="text" placeholder="user name" @bind-value="username">
        </div>
        <div class="form-group">
            <label>User name:</label>
            <input type="text" placeholder="password" @bind-value="password">
        </div>
        <div style="color:red">
            @errorMessage
        </div>
        <button href="" onclick="@PerformLogin">Log in</button>

    </NotAuthorized>
    <Authorized>
        <button href="" onclick="@PerformLogout">Log out</button>
    </Authorized>
</AuthorizeView>

@code {
    private string username;
    private string password;
    private string errorMessage;

    private async Task PerformLogin()
    {
        errorMessage = "";
        try
        {
            User user = new()
            {
                Username = username,
                Password = password
            };
            await ((CustomAuthenticationStateProvider) _authenticationStateProvider).ValidateLogin(user);
            username = "";
            password = "";
            _navigationManager.NavigateTo("/",forceLoad:true);
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }

    private async Task PerformLogout()
    {
        errorMessage = "";
        username = "";
        password = "";
        try
        {
            await ((CustomAuthenticationStateProvider) _authenticationStateProvider).Logout();
            _navigationManager.NavigateTo("/", forceLoad:true);
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }
}