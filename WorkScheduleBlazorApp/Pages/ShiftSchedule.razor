@page "/ShiftSchedule"
@using System.Security.Claims
@using WorkScheduleBlazorApp.Components
@inject AuthenticationStateProvider AuthenticationStateProvider
<h3>Shift Schedule</h3>

<AuthorizeView>
    <h3>Hello @FirstCharToUpper(context.User.Identity.Name) @FirstCharToUpper(context.User.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value)</h3>
</AuthorizeView>
<div class="btn-group">
    @foreach (var item in types)
    {
        if (Array.IndexOf(types, item) == selected)
        {
            <button class="btn btn-primary">@item.Name</button>
        }
        else
        {
            <button class="btn btn-secondary" @onclick="() => selected = Array.IndexOf(types,item)">@item.Name</button>
        }
    }
</div>
@GetRenderFragment(types[selected])

@code {
    
    RenderFragment GetRenderFragment(Type type)
    {
        RenderFragment renderFragment = renderTreeBuilder =>
        {
            renderTreeBuilder.OpenComponent(0, type);
            renderTreeBuilder.CloseComponent();
        };
        return renderFragment;
    }
    
    int selected;

    ComponentBase[] components =
    {
        new MyShiftSchedule(),
        new SurveyPrompt(),
        new FetchData()
    };

    Type[] types => components.Select(c => c.GetType()).ToArray();

    public static string FirstCharToUpper(string input)
    {
        switch (input)
        {
            case null: throw new ArgumentNullException(nameof(input));
            case "": throw new ArgumentException($"{nameof(input)} cannot be empty", nameof(input));
            default: return input[0].ToString().ToUpper() + input.Substring(1);
        }
    }


}