@using WorkScheduleBlazorApp.Data.Refresh
@using System.Text.RegularExpressions
@using WorkScheduleBlazorApp.Authentication
@using WorkScheduleBlazorApp.Data
@using WorkScheduleBlazorApp.Models

@inject IShift _shiftService
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IRefreshServiceNavMem _refreshServiceNavMem
@inject NavigationManager _navigationManager

<nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-dark bg-dark border-bottom box-shadow mb-2 top-row sticky-top">
    <div class="container-fluid">
        <div>
            <button class="navbar-toggler" @onclick="ToggleNavMenu" type="button" data-toggle="collapse" data-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                    aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
        </div>
        <a class="navbar-brand text-light" asp-area="" asp-page="/Index">WorkSchedule</a>
        @if (!_collapseNavMenu)
        {
            <AuthorizeView>
                <div class="form-group navbar-brand" asp-area="" asp-page="/Index">
                    <button class="btn btn-primary btn-block" href="" @onclick="PerformLogout">
                        Log out
                    </button>
                </div>
            </AuthorizeView>
        }
        <div class="@NavMenuCssClass navbar-collapse d-sm-inline-flex flex-sm-row-reverse">
            <ul class="navbar-nav flex-grow-1">
                <li class="nav-item px-3">
                    <AuthorizeView>
                        <NavLink class="nav-link" href="" @onclick="CollapseNavMenu" Match="NavLinkMatch.All">
                            <span class="oi oi-home" aria-hidden="true"></span> Home
                        </NavLink>
                    </AuthorizeView>
                </li>
                <li class="nav-item px-3">
                    <AuthorizeView>
                        <NavLink class="nav-link" href="Account" @onclick="CollapseNavMenu" Match="NavLinkMatch.All">
                            <span class="oi oi-file" aria-hidden="true"></span> Account
                        </NavLink>
                    </AuthorizeView>
                </li>
            </ul>
        </div>
        @if (_collapseNavMenu)
        {
            <AuthorizeView>
                <div class="form-group navbar-brand" asp-area="" asp-page="/Index">
                    <button class="btn btn-primary btn-block" href="" @onclick="PerformLogout">Log out</button>
                </div>
            </AuthorizeView>
        }
    </div>
</nav>

@code {
    private bool _show = false;

    bool _collapseNavMenu = true;

    string NavMenuCssClass => _collapseNavMenu ? "collapse" : null;

    public IList<GetShiftDTO> Shifts { get; set; }
    
    private User _cachedUser;
    
    private async Task OutFocus()
    {
        _collapseNavMenu = true;
        await Task.Delay(200);
        _show = false;
    }

    void ToggleNavMenu()
    {
        _collapseNavMenu = !_collapseNavMenu;
    }

    void CollapseNavMenu()
    {
        _collapseNavMenu = true;
    }
    
    protected override async Task OnInitializedAsync()
    {
        base.OnInitializedAsync();
        _refreshServiceNavMem.RefreshRequested += RefreshState;
        _cachedUser = ((CustomAuthenticationStateProvider) _authenticationStateProvider).cachedUser;
        Shifts = await _shiftService.GetShiftsFromUserId(_cachedUser.Id);
    }

    public async void RefreshState()
    {
        Shifts = await _shiftService.GetShiftsFromUserId(_cachedUser.Id);
        StateHasChanged();
    }
    
    public async Task PerformLogout()
    {
        try
        {
            await ((CustomAuthenticationStateProvider) _authenticationStateProvider).Logout();
            _navigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

}